
PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000009a2  00000a36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800076  00800076  00000a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010af  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d9  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a0  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000533  00000000  00000000  0000323c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d0  00000000  00000000  0000376f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003c3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  8a:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:

#include <avr/io.h>

void ADC_init(void)
{
	DDRA = 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_get_value>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	87 70       	andi	r24, 0x07	; 7
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_get_value+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	08 95       	ret

000000b4 <init_display>:
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	87 bb       	out	0x17, r24	; 23
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	88 bb       	out	0x18, r24	; 24
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 bb       	out	0x14, r24	; 20
  c4:	15 ba       	out	0x15, r1	; 21
  c6:	08 95       	ret

000000c8 <update_display_buffer>:
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	8c 01       	movw	r16, r24
  d2:	c6 e7       	ldi	r28, 0x76	; 118
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	9c 01       	movw	r18, r24
  d8:	ad ec       	ldi	r26, 0xCD	; 205
  da:	bc ec       	ldi	r27, 0xCC	; 204
  dc:	0e 94 c0 04 	call	0x980	; 0x980 <__umulhisi3>
  e0:	ac 01       	movw	r20, r24
  e2:	56 95       	lsr	r21
  e4:	47 95       	ror	r20
  e6:	56 95       	lsr	r21
  e8:	47 95       	ror	r20
  ea:	56 95       	lsr	r21
  ec:	47 95       	ror	r20
  ee:	9a 01       	movw	r18, r20
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	ca 01       	movw	r24, r20
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	f8 01       	movw	r30, r16
 108:	e8 1b       	sub	r30, r24
 10a:	f9 0b       	sbc	r31, r25
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	88 83       	st	Y, r24
 114:	9a 01       	movw	r18, r20
 116:	0e 94 c0 04 	call	0x980	; 0x980 <__umulhisi3>
 11a:	96 95       	lsr	r25
 11c:	87 95       	ror	r24
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	9c 01       	movw	r18, r24
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	82 0f       	add	r24, r18
 13a:	93 1f       	adc	r25, r19
 13c:	48 1b       	sub	r20, r24
 13e:	59 0b       	sbc	r21, r25
 140:	fa 01       	movw	r30, r20
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	98 01       	movw	r18, r16
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
 150:	36 95       	lsr	r19
 152:	27 95       	ror	r18
 154:	ab e7       	ldi	r26, 0x7B	; 123
 156:	b4 e1       	ldi	r27, 0x14	; 20
 158:	0e 94 c0 04 	call	0x980	; 0x980 <__umulhisi3>
 15c:	ac 01       	movw	r20, r24
 15e:	56 95       	lsr	r21
 160:	47 95       	ror	r20
 162:	9a 01       	movw	r18, r20
 164:	ad ec       	ldi	r26, 0xCD	; 205
 166:	bc ec       	ldi	r27, 0xCC	; 204
 168:	0e 94 c0 04 	call	0x980	; 0x980 <__umulhisi3>
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	9c 01       	movw	r18, r24
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	82 0f       	add	r24, r18
 18c:	93 1f       	adc	r25, r19
 18e:	48 1b       	sub	r20, r24
 190:	59 0b       	sbc	r21, r25
 192:	fa 01       	movw	r30, r20
 194:	e0 5a       	subi	r30, 0xA0	; 160
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	8a 83       	std	Y+2, r24	; 0x02
 19c:	98 01       	movw	r18, r16
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	36 95       	lsr	r19
 1a8:	27 95       	ror	r18
 1aa:	a5 ec       	ldi	r26, 0xC5	; 197
 1ac:	b0 e2       	ldi	r27, 0x20	; 32
 1ae:	0e 94 c0 04 	call	0x980	; 0x980 <__umulhisi3>
 1b2:	ac 01       	movw	r20, r24
 1b4:	52 95       	swap	r21
 1b6:	42 95       	swap	r20
 1b8:	4f 70       	andi	r20, 0x0F	; 15
 1ba:	45 27       	eor	r20, r21
 1bc:	5f 70       	andi	r21, 0x0F	; 15
 1be:	45 27       	eor	r20, r21
 1c0:	9a 01       	movw	r18, r20
 1c2:	ad ec       	ldi	r26, 0xCD	; 205
 1c4:	bc ec       	ldi	r27, 0xCC	; 204
 1c6:	0e 94 c0 04 	call	0x980	; 0x980 <__umulhisi3>
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	9c 01       	movw	r18, r24
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	48 1b       	sub	r20, r24
 1ee:	59 0b       	sbc	r21, r25
 1f0:	fa 01       	movw	r30, r20
 1f2:	e0 5a       	subi	r30, 0xA0	; 160
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	80 81       	ld	r24, Z
 1f8:	8b 83       	std	Y+3, r24	; 0x03
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <display>:
 204:	88 b3       	in	r24, 0x18	; 24
 206:	8f 60       	ori	r24, 0x0F	; 15
 208:	88 bb       	out	0x18, r24	; 24
 20a:	c0 98       	cbi	0x18, 0	; 24
 20c:	e6 e7       	ldi	r30, 0x76	; 118
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	83 81       	ldd	r24, Z+3	; 0x03
 212:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f e9       	ldi	r24, 0x9F	; 159
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <display+0x14>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <display+0x1a>
 21e:	00 00       	nop
 220:	88 b3       	in	r24, 0x18	; 24
 222:	8f 60       	ori	r24, 0x0F	; 15
 224:	88 bb       	out	0x18, r24	; 24
 226:	c1 98       	cbi	0x18, 1	; 24
 228:	82 81       	ldd	r24, Z+2	; 0x02
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	8f e9       	ldi	r24, 0x9F	; 159
 22e:	9f e0       	ldi	r25, 0x0F	; 15
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <display+0x2c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <display+0x32>
 236:	00 00       	nop
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	8f 60       	ori	r24, 0x0F	; 15
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	c2 98       	cbi	0x18, 2	; 24
 240:	81 81       	ldd	r24, Z+1	; 0x01
 242:	85 bb       	out	0x15, r24	; 21
 244:	8f e9       	ldi	r24, 0x9F	; 159
 246:	9f e0       	ldi	r25, 0x0F	; 15
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <display+0x44>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <display+0x4a>
 24e:	00 00       	nop
 250:	88 b3       	in	r24, 0x18	; 24
 252:	8f 60       	ori	r24, 0x0F	; 15
 254:	88 bb       	out	0x18, r24	; 24
 256:	c3 98       	cbi	0x18, 3	; 24
 258:	80 81       	ld	r24, Z
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <display+0x5c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <display+0x62>
 266:	00 00       	nop
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret

0000026e <main>:
#include "pwm.h"
#include "adc_driver.h"

int main(void)
{
	TARGET_TICKS = 23;
 26e:	87 e1       	ldi	r24, 0x17	; 23
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <TARGET_TICKS+0x1>
 276:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <TARGET_TICKS>
    init_display();
 27a:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_display>
	init_optocoupler();
 27e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <init_optocoupler>
	init_pid();
 282:	0e 94 6d 01 	call	0x2da	; 0x2da <init_pid>
	USART_Init(MYUBRR);
 286:	89 e1       	ldi	r24, 0x19	; 25
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_Init>
	init_pwm();
 28e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <init_pwm>
	ADC_init();
 292:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	dummy = 90;
 296:	8a e5       	ldi	r24, 0x5A	; 90
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <dummy+0x1>
 29e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <dummy>
	sei();
 2a2:	78 94       	sei
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	82 e5       	ldi	r24, 0x52	; 82
 2a8:	97 e0       	ldi	r25, 0x07	; 7
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x3c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x46>
 2b4:	00 00       	nop
	_delay_ms(150);

    while (1)
    {
		display();
 2b6:	0e 94 02 01 	call	0x204	; 0x204 <display>
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <main+0x48>

000002bc <init_optocoupler>:
	}
	if(OCR1B > ICR1)
	{
		OCR1B = ICR1;
	}
}
 2bc:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <INT0_CNT+0x1>
 2c0:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <INT0_CNT>
 2c4:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <REVOLUTIONS+0x1>
 2c8:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <REVOLUTIONS>
 2cc:	8a 98       	cbi	0x11, 2	; 17
 2ce:	92 9a       	sbi	0x12, 2	; 18
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	8b bf       	out	0x3b, r24	; 59
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	85 bf       	out	0x35, r24	; 53
 2d8:	08 95       	ret

000002da <init_pid>:
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	85 60       	ori	r24, 0x05	; 5
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	12 be       	out	0x32, r1	; 50
 2e2:	89 b7       	in	r24, 0x39	; 57
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	89 bf       	out	0x39, r24	; 57
 2e8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <REVOLUTIONS_PER_MINUTE+0x1>
 2ec:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <REVOLUTIONS_PER_MINUTE>
 2f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <TICKS+0x1>
 2f4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <TICKS>
 2f8:	08 95       	ret

000002fa <pid>:
 2fa:	4f 92       	push	r4
 2fc:	5f 92       	push	r5
 2fe:	6f 92       	push	r6
 300:	7f 92       	push	r7
 302:	8f 92       	push	r8
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <TICKS>
 316:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <TICKS+0x1>
 31a:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <TARGET_TICKS>
 31e:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <TARGET_TICKS+0x1>
 322:	68 1b       	sub	r22, r24
 324:	79 0b       	sbc	r23, r25
 326:	07 2e       	mov	r0, r23
 328:	00 0c       	add	r0, r0
 32a:	88 0b       	sbc	r24, r24
 32c:	99 0b       	sbc	r25, r25
 32e:	0e 94 9e 03 	call	0x73c	; 0x73c <__floatsisf>
 332:	6b 01       	movw	r12, r22
 334:	7c 01       	movw	r14, r24
 336:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <error>
 33a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <error+0x1>
 33e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <error+0x2>
 342:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <error+0x3>
 346:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <integral>
 34a:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <integral+0x1>
 34e:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <integral+0x2>
 352:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <integral+0x3>
 356:	0e 94 01 03 	call	0x602	; 0x602 <__addsf3>
 35a:	4b 01       	movw	r8, r22
 35c:	5c 01       	movw	r10, r24
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e8       	ldi	r19, 0x80	; 128
 362:	4b eb       	ldi	r20, 0xBB	; 187
 364:	54 e4       	ldi	r21, 0x44	; 68
 366:	0e 94 4e 04 	call	0x89c	; 0x89c <__gesf2>
 36a:	18 16       	cp	r1, r24
 36c:	4c f0       	brlt	.+18     	; 0x380 <pid+0x86>
 36e:	80 92 86 00 	sts	0x0086, r8	; 0x800086 <integral>
 372:	90 92 87 00 	sts	0x0087, r9	; 0x800087 <integral+0x1>
 376:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <integral+0x2>
 37a:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <integral+0x3>
 37e:	0c c0       	rjmp	.+24     	; 0x398 <pid+0x9e>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e8       	ldi	r25, 0x80	; 128
 384:	ab eb       	ldi	r26, 0xBB	; 187
 386:	b4 e4       	ldi	r27, 0x44	; 68
 388:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <integral>
 38c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <integral+0x1>
 390:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <integral+0x2>
 394:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <integral+0x3>
 398:	a7 01       	movw	r20, r14
 39a:	96 01       	movw	r18, r12
 39c:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <previous_error>
 3a0:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <previous_error+0x1>
 3a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <previous_error+0x2>
 3a8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <previous_error+0x3>
 3ac:	0e 94 00 03 	call	0x600	; 0x600 <__subsf3>
 3b0:	4b 01       	movw	r8, r22
 3b2:	5c 01       	movw	r10, r24
 3b4:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <derivative>
 3b8:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <derivative+0x1>
 3bc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <derivative+0x2>
 3c0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <derivative+0x3>
 3c4:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <integral>
 3c8:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <integral+0x1>
 3cc:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <integral+0x2>
 3d0:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <integral+0x3>
 3d4:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <KI>
 3d8:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <KI+0x1>
 3dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <KI+0x2>
 3e0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <KI+0x3>
 3e4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3>
 3e8:	2b 01       	movw	r4, r22
 3ea:	3c 01       	movw	r6, r24
 3ec:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <KP>
 3f0:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <KP+0x1>
 3f4:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <KP+0x2>
 3f8:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <KP+0x3>
 3fc:	c7 01       	movw	r24, r14
 3fe:	b6 01       	movw	r22, r12
 400:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3>
 404:	9b 01       	movw	r18, r22
 406:	ac 01       	movw	r20, r24
 408:	c3 01       	movw	r24, r6
 40a:	b2 01       	movw	r22, r4
 40c:	0e 94 01 03 	call	0x602	; 0x602 <__addsf3>
 410:	6b 01       	movw	r12, r22
 412:	7c 01       	movw	r14, r24
 414:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <KD>
 418:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <KD+0x1>
 41c:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <KD+0x2>
 420:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <KD+0x3>
 424:	c5 01       	movw	r24, r10
 426:	b4 01       	movw	r22, r8
 428:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__mulsf3>
 42c:	9b 01       	movw	r18, r22
 42e:	ac 01       	movw	r20, r24
 430:	c7 01       	movw	r24, r14
 432:	b6 01       	movw	r22, r12
 434:	0e 94 01 03 	call	0x602	; 0x602 <__addsf3>
 438:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <pid_result>
 43c:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <pid_result+0x1>
 440:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <pid_result+0x2>
 444:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <pid_result+0x3>
 448:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 44c:	79 bd       	out	0x29, r23	; 41
 44e:	68 bd       	out	0x28, r22	; 40
 450:	28 b5       	in	r18, 0x28	; 40
 452:	39 b5       	in	r19, 0x29	; 41
 454:	86 b5       	in	r24, 0x26	; 38
 456:	97 b5       	in	r25, 0x27	; 39
 458:	82 17       	cp	r24, r18
 45a:	93 07       	cpc	r25, r19
 45c:	20 f4       	brcc	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	86 b5       	in	r24, 0x26	; 38
 460:	97 b5       	in	r25, 0x27	; 39
 462:	99 bd       	out	0x29, r25	; 41
 464:	88 bd       	out	0x28, r24	; 40
 466:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <error>
 46a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <error+0x1>
 46e:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <error+0x2>
 472:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <error+0x3>
 476:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <previous_error>
 47a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <previous_error+0x1>
 47e:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <previous_error+0x2>
 482:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <previous_error+0x3>
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	df 90       	pop	r13
 48c:	cf 90       	pop	r12
 48e:	bf 90       	pop	r11
 490:	af 90       	pop	r10
 492:	9f 90       	pop	r9
 494:	8f 90       	pop	r8
 496:	7f 90       	pop	r7
 498:	6f 90       	pop	r6
 49a:	5f 90       	pop	r5
 49c:	4f 90       	pop	r4
 49e:	08 95       	ret

000004a0 <__vector_1>:

ISR(INT0_vect)  // external interrupt_zero ISR (INT0)
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
	INT0_CNT++;
 4b0:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <INT0_CNT>
 4b4:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <INT0_CNT+0x1>
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <INT0_CNT+0x1>
 4be:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <INT0_CNT>
	TICKS ++;
 4c2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <TICKS>
 4c6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <TICKS+0x1>
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <TICKS+0x1>
 4d0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <TICKS>
	if(INT0_CNT >= TICKS_PER_REVOLUTION)
 4d4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <INT0_CNT>
 4d8:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <INT0_CNT+0x1>
 4dc:	84 39       	cpi	r24, 0x94	; 148
 4de:	92 40       	sbci	r25, 0x02	; 2
 4e0:	4c f0       	brlt	.+18     	; 0x4f4 <__vector_1+0x54>
	{
		REVOLUTIONS ++;
 4e2:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <REVOLUTIONS>
 4e6:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <REVOLUTIONS+0x1>
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <REVOLUTIONS+0x1>
 4f0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <REVOLUTIONS>
		// USART_Transmit(REVOLUTIONS);
	}
}
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <__vector_11>:

// every 16.384 ms
ISR(TIMER0_OVF_vect)
{
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
	supply_voltage = ADC_get_value(0);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_get_value>
	supply_voltage >>= 2;
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <supply_voltage+0x1>
 538:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <supply_voltage>
	TIMER0_CNT ++;
 53c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <TIMER0_CNT>
 540:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <TIMER0_CNT+0x1>
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <TIMER0_CNT+0x1>
 54a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <TIMER0_CNT>
	pid();
 54e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <pid>
	//fuzzy();
	if(TIMER0_CNT >= 10)
 552:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <TIMER0_CNT>
 556:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <TIMER0_CNT+0x1>
 55a:	0a 97       	sbiw	r24, 0x0a	; 10
 55c:	54 f0       	brlt	.+20     	; 0x572 <__vector_11+0x6e>
	{
		update_display_buffer(TICKS);
 55e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <TICKS>
 562:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <TICKS+0x1>
 566:	0e 94 64 00 	call	0xc8	; 0xc8 <update_display_buffer>
		TIMER0_CNT = 0;
 56a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <TIMER0_CNT+0x1>
 56e:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <TIMER0_CNT>
	}
	USART_Transmit(255);
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Transmit>
	USART_Transmit(TARGET_TICKS);
 578:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <TARGET_TICKS>
 57c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Transmit>
	USART_Transmit(TICKS);
 580:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <TICKS>
 584:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <TICKS+0x1>
 588:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Transmit>
	USART_Transmit((uint8_t)(supply_voltage));
 58c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <supply_voltage>
 590:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Transmit>
	USART_Transmit(0);
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Transmit>
	USART_Transmit(0);
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_Transmit>
	//USART_Transmit((unsigned char)(error));
	//update_display_buffer(REVOLUTIONS_PER_MINUTE);
	TICKS = 0;
 5a0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <TICKS+0x1>
 5a4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <TICKS>
 5a8:	ff 91       	pop	r31
 5aa:	ef 91       	pop	r30
 5ac:	bf 91       	pop	r27
 5ae:	af 91       	pop	r26
 5b0:	9f 91       	pop	r25
 5b2:	8f 91       	pop	r24
 5b4:	7f 91       	pop	r23
 5b6:	6f 91       	pop	r22
 5b8:	5f 91       	pop	r21
 5ba:	4f 91       	pop	r20
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <init_pwm>:

#include "global.h"

void init_pwm(void)
{
	DDRD |= 0b00110000;
 5ca:	81 b3       	in	r24, 0x11	; 17
 5cc:	80 63       	ori	r24, 0x30	; 48
 5ce:	81 bb       	out	0x11, r24	; 17
	ICR1 = 1200; /*CUSTOM TOP OF TIMER1*/
 5d0:	80 eb       	ldi	r24, 0xB0	; 176
 5d2:	94 e0       	ldi	r25, 0x04	; 4
 5d4:	97 bd       	out	0x27, r25	; 39
 5d6:	86 bd       	out	0x26, r24	; 38
	TCCR1A = 0b10100010; /*SET PWM ON BOTH PD4 AND PD5*/
 5d8:	82 ea       	ldi	r24, 0xA2	; 162
 5da:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011001; /*0x19*/
 5dc:	89 e1       	ldi	r24, 0x19	; 25
 5de:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0; /*FACTOR DE UMPLERE PWM1: 0:ICR1*/
 5e0:	1b bc       	out	0x2b, r1	; 43
 5e2:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0; /*FACTOR DE UMPLERE PWM2: 0:ICR1*/
 5e4:	19 bc       	out	0x29, r1	; 41
 5e6:	18 bc       	out	0x28, r1	; 40
 5e8:	08 95       	ret

000005ea <USART_Init>:
 5ea:	90 bd       	out	0x20, r25	; 32
 5ec:	89 b9       	out	0x09, r24	; 9
 5ee:	88 e1       	ldi	r24, 0x18	; 24
 5f0:	8a b9       	out	0x0a, r24	; 10
 5f2:	8e e8       	ldi	r24, 0x8E	; 142
 5f4:	80 bd       	out	0x20, r24	; 32
 5f6:	08 95       	ret

000005f8 <USART_Transmit>:
 5f8:	5d 9b       	sbis	0x0b, 5	; 11
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <USART_Transmit>
 5fc:	8c b9       	out	0x0c, r24	; 12
 5fe:	08 95       	ret

00000600 <__subsf3>:
 600:	50 58       	subi	r21, 0x80	; 128

00000602 <__addsf3>:
 602:	bb 27       	eor	r27, r27
 604:	aa 27       	eor	r26, r26
 606:	0e 94 18 03 	call	0x630	; 0x630 <__addsf3x>
 60a:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_round>
 60e:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_pscA>
 612:	38 f0       	brcs	.+14     	; 0x622 <__addsf3+0x20>
 614:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscB>
 618:	20 f0       	brcs	.+8      	; 0x622 <__addsf3+0x20>
 61a:	39 f4       	brne	.+14     	; 0x62a <__addsf3+0x28>
 61c:	9f 3f       	cpi	r25, 0xFF	; 255
 61e:	19 f4       	brne	.+6      	; 0x626 <__addsf3+0x24>
 620:	26 f4       	brtc	.+8      	; 0x62a <__addsf3+0x28>
 622:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_nan>
 626:	0e f4       	brtc	.+2      	; 0x62a <__addsf3+0x28>
 628:	e0 95       	com	r30
 62a:	e7 fb       	bst	r30, 7
 62c:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>

00000630 <__addsf3x>:
 630:	e9 2f       	mov	r30, r25
 632:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_split3>
 636:	58 f3       	brcs	.-42     	; 0x60e <__addsf3+0xc>
 638:	ba 17       	cp	r27, r26
 63a:	62 07       	cpc	r22, r18
 63c:	73 07       	cpc	r23, r19
 63e:	84 07       	cpc	r24, r20
 640:	95 07       	cpc	r25, r21
 642:	20 f0       	brcs	.+8      	; 0x64c <__addsf3x+0x1c>
 644:	79 f4       	brne	.+30     	; 0x664 <__addsf3x+0x34>
 646:	a6 f5       	brtc	.+104    	; 0x6b0 <__addsf3x+0x80>
 648:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_zero>
 64c:	0e f4       	brtc	.+2      	; 0x650 <__addsf3x+0x20>
 64e:	e0 95       	com	r30
 650:	0b 2e       	mov	r0, r27
 652:	ba 2f       	mov	r27, r26
 654:	a0 2d       	mov	r26, r0
 656:	0b 01       	movw	r0, r22
 658:	b9 01       	movw	r22, r18
 65a:	90 01       	movw	r18, r0
 65c:	0c 01       	movw	r0, r24
 65e:	ca 01       	movw	r24, r20
 660:	a0 01       	movw	r20, r0
 662:	11 24       	eor	r1, r1
 664:	ff 27       	eor	r31, r31
 666:	59 1b       	sub	r21, r25
 668:	99 f0       	breq	.+38     	; 0x690 <__addsf3x+0x60>
 66a:	59 3f       	cpi	r21, 0xF9	; 249
 66c:	50 f4       	brcc	.+20     	; 0x682 <__addsf3x+0x52>
 66e:	50 3e       	cpi	r21, 0xE0	; 224
 670:	68 f1       	brcs	.+90     	; 0x6cc <__addsf3x+0x9c>
 672:	1a 16       	cp	r1, r26
 674:	f0 40       	sbci	r31, 0x00	; 0
 676:	a2 2f       	mov	r26, r18
 678:	23 2f       	mov	r18, r19
 67a:	34 2f       	mov	r19, r20
 67c:	44 27       	eor	r20, r20
 67e:	58 5f       	subi	r21, 0xF8	; 248
 680:	f3 cf       	rjmp	.-26     	; 0x668 <__addsf3x+0x38>
 682:	46 95       	lsr	r20
 684:	37 95       	ror	r19
 686:	27 95       	ror	r18
 688:	a7 95       	ror	r26
 68a:	f0 40       	sbci	r31, 0x00	; 0
 68c:	53 95       	inc	r21
 68e:	c9 f7       	brne	.-14     	; 0x682 <__addsf3x+0x52>
 690:	7e f4       	brtc	.+30     	; 0x6b0 <__addsf3x+0x80>
 692:	1f 16       	cp	r1, r31
 694:	ba 0b       	sbc	r27, r26
 696:	62 0b       	sbc	r22, r18
 698:	73 0b       	sbc	r23, r19
 69a:	84 0b       	sbc	r24, r20
 69c:	ba f0       	brmi	.+46     	; 0x6cc <__addsf3x+0x9c>
 69e:	91 50       	subi	r25, 0x01	; 1
 6a0:	a1 f0       	breq	.+40     	; 0x6ca <__addsf3x+0x9a>
 6a2:	ff 0f       	add	r31, r31
 6a4:	bb 1f       	adc	r27, r27
 6a6:	66 1f       	adc	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	c2 f7       	brpl	.-16     	; 0x69e <__addsf3x+0x6e>
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <__addsf3x+0x9c>
 6b0:	ba 0f       	add	r27, r26
 6b2:	62 1f       	adc	r22, r18
 6b4:	73 1f       	adc	r23, r19
 6b6:	84 1f       	adc	r24, r20
 6b8:	48 f4       	brcc	.+18     	; 0x6cc <__addsf3x+0x9c>
 6ba:	87 95       	ror	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b7 95       	ror	r27
 6c2:	f7 95       	ror	r31
 6c4:	9e 3f       	cpi	r25, 0xFE	; 254
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <__addsf3x+0x9a>
 6c8:	b0 cf       	rjmp	.-160    	; 0x62a <__addsf3+0x28>
 6ca:	93 95       	inc	r25
 6cc:	88 0f       	add	r24, r24
 6ce:	08 f0       	brcs	.+2      	; 0x6d2 <__addsf3x+0xa2>
 6d0:	99 27       	eor	r25, r25
 6d2:	ee 0f       	add	r30, r30
 6d4:	97 95       	ror	r25
 6d6:	87 95       	ror	r24
 6d8:	08 95       	ret

000006da <__fixunssfsi>:
 6da:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_splitA>
 6de:	88 f0       	brcs	.+34     	; 0x702 <__fixunssfsi+0x28>
 6e0:	9f 57       	subi	r25, 0x7F	; 127
 6e2:	98 f0       	brcs	.+38     	; 0x70a <__fixunssfsi+0x30>
 6e4:	b9 2f       	mov	r27, r25
 6e6:	99 27       	eor	r25, r25
 6e8:	b7 51       	subi	r27, 0x17	; 23
 6ea:	b0 f0       	brcs	.+44     	; 0x718 <__fixunssfsi+0x3e>
 6ec:	e1 f0       	breq	.+56     	; 0x726 <__fixunssfsi+0x4c>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a f0       	brmi	.+6      	; 0x6fe <__fixunssfsi+0x24>
 6f8:	ba 95       	dec	r27
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__fixunssfsi+0x14>
 6fc:	14 c0       	rjmp	.+40     	; 0x726 <__fixunssfsi+0x4c>
 6fe:	b1 30       	cpi	r27, 0x01	; 1
 700:	91 f0       	breq	.+36     	; 0x726 <__fixunssfsi+0x4c>
 702:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_zero>
 706:	b1 e0       	ldi	r27, 0x01	; 1
 708:	08 95       	ret
 70a:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_zero>
 70e:	67 2f       	mov	r22, r23
 710:	78 2f       	mov	r23, r24
 712:	88 27       	eor	r24, r24
 714:	b8 5f       	subi	r27, 0xF8	; 248
 716:	39 f0       	breq	.+14     	; 0x726 <__fixunssfsi+0x4c>
 718:	b9 3f       	cpi	r27, 0xF9	; 249
 71a:	cc f3       	brlt	.-14     	; 0x70e <__fixunssfsi+0x34>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b3 95       	inc	r27
 724:	d9 f7       	brne	.-10     	; 0x71c <__fixunssfsi+0x42>
 726:	3e f4       	brtc	.+14     	; 0x736 <__fixunssfsi+0x5c>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__floatunsisf>:
 738:	e8 94       	clt
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__floatsisf+0x12>

0000073c <__floatsisf>:
 73c:	97 fb       	bst	r25, 7
 73e:	3e f4       	brtc	.+14     	; 0x74e <__floatsisf+0x12>
 740:	90 95       	com	r25
 742:	80 95       	com	r24
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	99 23       	and	r25, r25
 750:	a9 f0       	breq	.+42     	; 0x77c <__floatsisf+0x40>
 752:	f9 2f       	mov	r31, r25
 754:	96 e9       	ldi	r25, 0x96	; 150
 756:	bb 27       	eor	r27, r27
 758:	93 95       	inc	r25
 75a:	f6 95       	lsr	r31
 75c:	87 95       	ror	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b7 95       	ror	r27
 764:	f1 11       	cpse	r31, r1
 766:	f8 cf       	rjmp	.-16     	; 0x758 <__floatsisf+0x1c>
 768:	fa f4       	brpl	.+62     	; 0x7a8 <__floatsisf+0x6c>
 76a:	bb 0f       	add	r27, r27
 76c:	11 f4       	brne	.+4      	; 0x772 <__floatsisf+0x36>
 76e:	60 ff       	sbrs	r22, 0
 770:	1b c0       	rjmp	.+54     	; 0x7a8 <__floatsisf+0x6c>
 772:	6f 5f       	subi	r22, 0xFF	; 255
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	16 c0       	rjmp	.+44     	; 0x7a8 <__floatsisf+0x6c>
 77c:	88 23       	and	r24, r24
 77e:	11 f0       	breq	.+4      	; 0x784 <__floatsisf+0x48>
 780:	96 e9       	ldi	r25, 0x96	; 150
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <__floatsisf+0x6a>
 784:	77 23       	and	r23, r23
 786:	21 f0       	breq	.+8      	; 0x790 <__floatsisf+0x54>
 788:	9e e8       	ldi	r25, 0x8E	; 142
 78a:	87 2f       	mov	r24, r23
 78c:	76 2f       	mov	r23, r22
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__floatsisf+0x5e>
 790:	66 23       	and	r22, r22
 792:	71 f0       	breq	.+28     	; 0x7b0 <__floatsisf+0x74>
 794:	96 e8       	ldi	r25, 0x86	; 134
 796:	86 2f       	mov	r24, r22
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	2a f0       	brmi	.+10     	; 0x7a8 <__floatsisf+0x6c>
 79e:	9a 95       	dec	r25
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	da f7       	brpl	.-10     	; 0x79e <__floatsisf+0x62>
 7a8:	88 0f       	add	r24, r24
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret

000007b2 <__fp_cmp>:
 7b2:	99 0f       	add	r25, r25
 7b4:	00 08       	sbc	r0, r0
 7b6:	55 0f       	add	r21, r21
 7b8:	aa 0b       	sbc	r26, r26
 7ba:	e0 e8       	ldi	r30, 0x80	; 128
 7bc:	fe ef       	ldi	r31, 0xFE	; 254
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	e8 07       	cpc	r30, r24
 7c4:	f9 07       	cpc	r31, r25
 7c6:	c0 f0       	brcs	.+48     	; 0x7f8 <__fp_cmp+0x46>
 7c8:	12 16       	cp	r1, r18
 7ca:	13 06       	cpc	r1, r19
 7cc:	e4 07       	cpc	r30, r20
 7ce:	f5 07       	cpc	r31, r21
 7d0:	98 f0       	brcs	.+38     	; 0x7f8 <__fp_cmp+0x46>
 7d2:	62 1b       	sub	r22, r18
 7d4:	73 0b       	sbc	r23, r19
 7d6:	84 0b       	sbc	r24, r20
 7d8:	95 0b       	sbc	r25, r21
 7da:	39 f4       	brne	.+14     	; 0x7ea <__fp_cmp+0x38>
 7dc:	0a 26       	eor	r0, r26
 7de:	61 f0       	breq	.+24     	; 0x7f8 <__fp_cmp+0x46>
 7e0:	23 2b       	or	r18, r19
 7e2:	24 2b       	or	r18, r20
 7e4:	25 2b       	or	r18, r21
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <__fp_cmp+0x3e>
 7e8:	08 95       	ret
 7ea:	0a 26       	eor	r0, r26
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <__fp_cmp+0x3e>
 7ee:	a1 40       	sbci	r26, 0x01	; 1
 7f0:	a6 95       	lsr	r26
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	81 1d       	adc	r24, r1
 7f6:	81 1d       	adc	r24, r1
 7f8:	08 95       	ret

000007fa <__fp_inf>:
 7fa:	97 f9       	bld	r25, 7
 7fc:	9f 67       	ori	r25, 0x7F	; 127
 7fe:	80 e8       	ldi	r24, 0x80	; 128
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	08 95       	ret

00000806 <__fp_nan>:
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	80 ec       	ldi	r24, 0xC0	; 192
 80a:	08 95       	ret

0000080c <__fp_pscA>:
 80c:	00 24       	eor	r0, r0
 80e:	0a 94       	dec	r0
 810:	16 16       	cp	r1, r22
 812:	17 06       	cpc	r1, r23
 814:	18 06       	cpc	r1, r24
 816:	09 06       	cpc	r0, r25
 818:	08 95       	ret

0000081a <__fp_pscB>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	12 16       	cp	r1, r18
 820:	13 06       	cpc	r1, r19
 822:	14 06       	cpc	r1, r20
 824:	05 06       	cpc	r0, r21
 826:	08 95       	ret

00000828 <__fp_round>:
 828:	09 2e       	mov	r0, r25
 82a:	03 94       	inc	r0
 82c:	00 0c       	add	r0, r0
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0xc>
 830:	88 23       	and	r24, r24
 832:	52 f0       	brmi	.+20     	; 0x848 <__fp_round+0x20>
 834:	bb 0f       	add	r27, r27
 836:	40 f4       	brcc	.+16     	; 0x848 <__fp_round+0x20>
 838:	bf 2b       	or	r27, r31
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0x18>
 83c:	60 ff       	sbrs	r22, 0
 83e:	04 c0       	rjmp	.+8      	; 0x848 <__fp_round+0x20>
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	08 95       	ret

0000084a <__fp_split3>:
 84a:	57 fd       	sbrc	r21, 7
 84c:	90 58       	subi	r25, 0x80	; 128
 84e:	44 0f       	add	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	59 f0       	breq	.+22     	; 0x86a <__stack+0xb>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	71 f0       	breq	.+28     	; 0x874 <__stack+0x15>
 858:	47 95       	ror	r20

0000085a <__fp_splitA>:
 85a:	88 0f       	add	r24, r24
 85c:	97 fb       	bst	r25, 7
 85e:	99 1f       	adc	r25, r25
 860:	61 f0       	breq	.+24     	; 0x87a <__stack+0x1b>
 862:	9f 3f       	cpi	r25, 0xFF	; 255
 864:	79 f0       	breq	.+30     	; 0x884 <__stack+0x25>
 866:	87 95       	ror	r24
 868:	08 95       	ret
 86a:	12 16       	cp	r1, r18
 86c:	13 06       	cpc	r1, r19
 86e:	14 06       	cpc	r1, r20
 870:	55 1f       	adc	r21, r21
 872:	f2 cf       	rjmp	.-28     	; 0x858 <__fp_split3+0xe>
 874:	46 95       	lsr	r20
 876:	f1 df       	rcall	.-30     	; 0x85a <__fp_splitA>
 878:	08 c0       	rjmp	.+16     	; 0x88a <__stack+0x2b>
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	99 1f       	adc	r25, r25
 882:	f1 cf       	rjmp	.-30     	; 0x866 <__stack+0x7>
 884:	86 95       	lsr	r24
 886:	71 05       	cpc	r23, r1
 888:	61 05       	cpc	r22, r1
 88a:	08 94       	sec
 88c:	08 95       	ret

0000088e <__fp_zero>:
 88e:	e8 94       	clt

00000890 <__fp_szero>:
 890:	bb 27       	eor	r27, r27
 892:	66 27       	eor	r22, r22
 894:	77 27       	eor	r23, r23
 896:	cb 01       	movw	r24, r22
 898:	97 f9       	bld	r25, 7
 89a:	08 95       	ret

0000089c <__gesf2>:
 89c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_cmp>
 8a0:	08 f4       	brcc	.+2      	; 0x8a4 <__gesf2+0x8>
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	08 95       	ret

000008a6 <__mulsf3>:
 8a6:	0e 94 66 04 	call	0x8cc	; 0x8cc <__mulsf3x>
 8aa:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_round>
 8ae:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_pscA>
 8b2:	38 f0       	brcs	.+14     	; 0x8c2 <__mulsf3+0x1c>
 8b4:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscB>
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__mulsf3+0x1c>
 8ba:	95 23       	and	r25, r21
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <__mulsf3+0x1c>
 8be:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>
 8c2:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_nan>
 8c6:	11 24       	eor	r1, r1
 8c8:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>

000008cc <__mulsf3x>:
 8cc:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_split3>
 8d0:	70 f3       	brcs	.-36     	; 0x8ae <__mulsf3+0x8>

000008d2 <__mulsf3_pse>:
 8d2:	95 9f       	mul	r25, r21
 8d4:	c1 f3       	breq	.-16     	; 0x8c6 <__mulsf3+0x20>
 8d6:	95 0f       	add	r25, r21
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	55 1f       	adc	r21, r21
 8dc:	62 9f       	mul	r22, r18
 8de:	f0 01       	movw	r30, r0
 8e0:	72 9f       	mul	r23, r18
 8e2:	bb 27       	eor	r27, r27
 8e4:	f0 0d       	add	r31, r0
 8e6:	b1 1d       	adc	r27, r1
 8e8:	63 9f       	mul	r22, r19
 8ea:	aa 27       	eor	r26, r26
 8ec:	f0 0d       	add	r31, r0
 8ee:	b1 1d       	adc	r27, r1
 8f0:	aa 1f       	adc	r26, r26
 8f2:	64 9f       	mul	r22, r20
 8f4:	66 27       	eor	r22, r22
 8f6:	b0 0d       	add	r27, r0
 8f8:	a1 1d       	adc	r26, r1
 8fa:	66 1f       	adc	r22, r22
 8fc:	82 9f       	mul	r24, r18
 8fe:	22 27       	eor	r18, r18
 900:	b0 0d       	add	r27, r0
 902:	a1 1d       	adc	r26, r1
 904:	62 1f       	adc	r22, r18
 906:	73 9f       	mul	r23, r19
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	62 1f       	adc	r22, r18
 90e:	83 9f       	mul	r24, r19
 910:	a0 0d       	add	r26, r0
 912:	61 1d       	adc	r22, r1
 914:	22 1f       	adc	r18, r18
 916:	74 9f       	mul	r23, r20
 918:	33 27       	eor	r19, r19
 91a:	a0 0d       	add	r26, r0
 91c:	61 1d       	adc	r22, r1
 91e:	23 1f       	adc	r18, r19
 920:	84 9f       	mul	r24, r20
 922:	60 0d       	add	r22, r0
 924:	21 1d       	adc	r18, r1
 926:	82 2f       	mov	r24, r18
 928:	76 2f       	mov	r23, r22
 92a:	6a 2f       	mov	r22, r26
 92c:	11 24       	eor	r1, r1
 92e:	9f 57       	subi	r25, 0x7F	; 127
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	9a f0       	brmi	.+38     	; 0x95a <__mulsf3_pse+0x88>
 934:	f1 f0       	breq	.+60     	; 0x972 <__mulsf3_pse+0xa0>
 936:	88 23       	and	r24, r24
 938:	4a f0       	brmi	.+18     	; 0x94c <__mulsf3_pse+0x7a>
 93a:	ee 0f       	add	r30, r30
 93c:	ff 1f       	adc	r31, r31
 93e:	bb 1f       	adc	r27, r27
 940:	66 1f       	adc	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	91 50       	subi	r25, 0x01	; 1
 948:	50 40       	sbci	r21, 0x00	; 0
 94a:	a9 f7       	brne	.-22     	; 0x936 <__mulsf3_pse+0x64>
 94c:	9e 3f       	cpi	r25, 0xFE	; 254
 94e:	51 05       	cpc	r21, r1
 950:	80 f0       	brcs	.+32     	; 0x972 <__mulsf3_pse+0xa0>
 952:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>
 956:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	e4 f3       	brlt	.-8      	; 0x956 <__mulsf3_pse+0x84>
 95e:	98 3e       	cpi	r25, 0xE8	; 232
 960:	d4 f3       	brlt	.-12     	; 0x956 <__mulsf3_pse+0x84>
 962:	86 95       	lsr	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f7 95       	ror	r31
 96c:	e7 95       	ror	r30
 96e:	9f 5f       	subi	r25, 0xFF	; 255
 970:	c1 f7       	brne	.-16     	; 0x962 <__mulsf3_pse+0x90>
 972:	fe 2b       	or	r31, r30
 974:	88 0f       	add	r24, r24
 976:	91 1d       	adc	r25, r1
 978:	96 95       	lsr	r25
 97a:	87 95       	ror	r24
 97c:	97 f9       	bld	r25, 7
 97e:	08 95       	ret

00000980 <__umulhisi3>:
 980:	a2 9f       	mul	r26, r18
 982:	b0 01       	movw	r22, r0
 984:	b3 9f       	mul	r27, r19
 986:	c0 01       	movw	r24, r0
 988:	a3 9f       	mul	r26, r19
 98a:	70 0d       	add	r23, r0
 98c:	81 1d       	adc	r24, r1
 98e:	11 24       	eor	r1, r1
 990:	91 1d       	adc	r25, r1
 992:	b2 9f       	mul	r27, r18
 994:	70 0d       	add	r23, r0
 996:	81 1d       	adc	r24, r1
 998:	11 24       	eor	r1, r1
 99a:	91 1d       	adc	r25, r1
 99c:	08 95       	ret

0000099e <_exit>:
 99e:	f8 94       	cli

000009a0 <__stop_program>:
 9a0:	ff cf       	rjmp	.-2      	; 0x9a0 <__stop_program>
